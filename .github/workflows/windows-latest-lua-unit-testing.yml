name: Windows Lua Unit Testing

on: [push, pull_request]

jobs:
  lua-unit-testing-on-windows-latest:
    name: "LuaUnit on Windows-latest (mingw32)"
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@main

    - name: Install luaJIT 2.0.4
      run: |
        cd ${{ github.workspace }}\.building\LuaJIT-2.0.4
        ### PREFIX isn't working on windows mingw32/powershell, but I don't care. luaJIT is installed in ${{ github.workspace }}\.building\LuaJIT-2.0.4\src\luajit.exe
        mingw32-make
        mingw32-make install

    - name: Run LuaUnit 3.4
      id: lua_unit_tests
      run: |
        ### copy luaunit.lua to package directory, because I don't want to mess around with lua pathes again: see .building\LuaJIT-2.0.4\src\luaconf.h
        New-Item -Path "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\" -Name "lua" -ItemType "directory"
        Copy-Item "${{ github.workspace }}\.testing\luaunit.lua" -Destination "${{ github.workspace }}\.building\LuaJIT-2.0.4\src\lua\"

        dir -Path ${{ github.workspace }}\.testing\tests -Filter *.lua -Recurse | %{& '${{ github.workspace }}\.building\LuaJIT-2.0.4\src\luajit.exe' $_.FullName -o text --verbose --error > ${{ github.workspace }}\.testing\testresult.log}
        # https://timheuer.com/blog/manually-force-a-failure-in-github-action-step/
        type ${{ github.workspace }}\.testing\testresult.log
        $testFail = Select-String -Path ${{ github.workspace }}\.testing\testresult.log -Pattern 'FAIL' -CaseSensitive
        Write-Output "::set-output name=fail::$testFail"
        Write-Output "steps.lua_unit_tests.outputs.fail = ${{ steps.lua_unit_tests.outputs.fail }}" 
        $testError = Select-String -Path ${{ github.workspace }}\.testing\testresult.log -Pattern 'ERROR' -CaseSensitive
        Write-Output "::set-output name=error::$testError"
        Write-Output "steps.lua_unit_tests.outputs.error = ${{ steps.lua_unit_tests.outputs.error }}" 
      
    - name: Unit test failed?
      ######## Check if tests succeed:
      # https://stackoverflow.com/questions/59191913/get-output-of-a-specific-step-in-github-actions
      #if: ${{ steps.lua_unit_tests.outputs.fail != "" || steps.lua_unit_tests.outputs.error != "" }}
      run: |
        echo "steps.lua_unit_tests.outputs.fail = ${{ steps.lua_unit_tests.outputs.fail }}"
        echo "steps.lua_unit_tests.outputs.error = ${{ steps.lua_unit_tests.outputs.error }}"
        echo "Unit tests failed!"
        exit 1

    - name: Install luarocks 3.8.0
      run: |
        ######## install lua rocks manually: https://github.com/luarocks/luarocks/wiki/Installation-instructions-for-Unix
        wget https://luarocks.github.io/luarocks/releases/luarocks-3.8.0.tar.gz
        tar zxpf luarocks-3.8.0.tar.gz
        cd luarocks-3.8.0
        ######## set luajit pathes to luarocks
        .\configure --prefix=${{ github.workspace }}\luarocks --with-lua=${{ github.workspace }}\luajit --with-lua-include=${{ github.workspace }}\luajit\include\luajit-2.0 --with-lua-lib=${{ github.workspace }}\luajit\lib
        make
        make install

    - name: Install dependencies
      run: |
        ######## Use --tree to define the installation path of the module, which is luajit/share/lua/5.1/ although only the 'root' directory is set
        ${{ github.workspace }}\luarocks\bin\luarocks --tree=${{ github.workspace }}\luajit install luacov

    - name: Generate coverage report with luacov
      run: |
        sudo find ${{ github.workspace }}\.testing\tests -name "*.lua" -type f -exec ${{ github.workspace }}\luajit\bin\luajit -lluacov {} \;
        ${{ github.workspace }}\luajit\bin\luacov

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ${{ github.workspace }}
        #path_to_write_report: ./codecov_report.txt https://github.com/codecov/codecov-action/issues/476
        verbose: true
