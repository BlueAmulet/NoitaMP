name: Windows Lua Unit Testing

on: [push, pull_request]

jobs:
  lua-unit-testing-on-windows-latest:
    name: "LuaUnit on Windows-latest (mingw32)"
    runs-on: windows-latest
    env:
      temp_dir: ${{ github.workspace }}\temp
      lua_temp_dir: ${{ github.workspace }}\temp\lua-5.1.5
      luajit_temp_dir: ${{ github.workspace }}\temp\luaJIT-2.0.4
      lua_install_dir: ${{ github.workspace }}\Lua
      lua_install_bin_dir: ${{ github.workspace }}\Lua\bin
      lua_install_lib_dir: ${{ github.workspace }}\Lua\lib
      lua_install_include_dir: ${{ github.workspace }}\Lua\include

    steps:
    - uses: actions/checkout@main

    - name: Install luaJIT 2.0.4
      if: ${{ false }}
      run: |
        cd ${{ github.workspace }}\.building\LuaJIT-2.0.4
        ### PREFIX isn't working on windows mingw32/powershell, but I don't care. luaJIT is installed in ${{ github.workspace }}\.building\LuaJIT-2.0.4\src\luajit.exe
        mingw32-make
        mingw32-make install

    - name: Make directories for Lua installation
      run: |
        ### https://gist.github.com/Egor-Skriptunoff/cb952f7eaf39b7b1bf739b818ece87cd
        ### http://lua-users.org/wiki/BuildingLuaInWindowsForNewbies
        New-Item -Path "${{ github.workspace }}" -Name "Lua" -ItemType "directory"
        New-Item -Path "${{ env.lua_install_dir }}" -Name "bin" -ItemType "directory"
        New-Item -Path "${{ env.lua_install_dir }}" -Name "lib" -ItemType "directory"
        New-Item -Path "${{ env.lua_install_dir }}" -Name "include" -ItemType "directory"

    - name: Build and install Lua 5.1.5
      if: ${{ false }}
      run: |
        ### https://gist.github.com/Egor-Skriptunoff/cb952f7eaf39b7b1bf739b818ece87cd
        ### http://lua-users.org/wiki/BuildingLuaInWindowsForNewbies

        ### Build
        New-Item -Path "${{ github.workspace }}" -Name "temp" -ItemType "directory"
        cd ${{ env.temp_dir }}\
        Invoke-WebRequest -Uri "https://www.lua.org/ftp/lua-5.1.5.tar.gz" -OutFile "${{ env.temp_dir }}\lua-5.1.5.tar.gz"
        #Expand-Archive -Path "${{ env.temp_dir }}\lua-5.1.5.tar.gz" -DestinationPath "${{ env.lua_temp_dir }}\"
        tar zxpf lua-5.1.5.tar.gz
        cd ${{ env.lua_temp_dir }}\
        mingw32-make PLAT=mingw
        
        ### Install
        ### binaries
        Copy-Item "${{ env.lua_temp_dir }}\src\lua.exe" -Destination "${{ env.lua_install_bin_dir }}\"
        Copy-Item "${{ env.lua_temp_dir }}\src\luac.exe" -Destination "${{ env.lua_install_bin_dir }}\"
        Copy-Item "${{ env.lua_temp_dir }}\src\lua51.dll" -Destination "${{ env.lua_install_bin_dir }}\"

        Start-Process -FilePath "${{ env.lua_install_bin_dir }}\lua.exe" -ArgumentList " -v" -Wait -NoNewWindow

    - name: Build and install LuaJIT 2.0.4
      run: |
        ### https://gist.github.com/Egor-Skriptunoff/cb952f7eaf39b7b1bf739b818ece87cd
        ### http://lua-users.org/wiki/BuildingLuaInWindowsForNewbies

        ### Build
        Copy-Item -Path "${{ github.workspace }}\.building\LuaJIT-2.0.4\" -Destination "${{ env.luajit_temp_dir }}\" -Recurse
        cd ${{ env.luajit_temp_dir }}\
        mingw32-make PLAT=mingw
        
        ### Install
        ### binaries
        Copy-Item "${{ env.luajit_temp_dir }}\src\luajit.exe" -Destination "${{ env.lua_install_bin_dir }}\"
        Copy-Item "${{ env.luajit_temp_dir }}\src\lua51.dll" -Destination "${{ env.lua_install_bin_dir }}\"
        
        ### modules written in lua
        Copy-Item "${{ env.luajit_temp_dir }}\src\jit\" -Destination "${{ env.lua_install_lib_dir }}\jit\"

        ### includes
        Copy-Item "${{ env.luajit_temp_dir }}\src\luaconf.h" -Destination "${{ env.lua_install_include_dir }}\"
        Copy-Item "${{ env.luajit_temp_dir }}\src\lua.h" -Destination "${{ env.lua_install_include_dir }}\"
        Copy-Item "${{ env.luajit_temp_dir }}\src\lualib.h" -Destination "${{ env.lua_install_include_dir }}\"
        Copy-Item "${{ env.luajit_temp_dir }}\src\lauxlib.h" -Destination "${{ env.lua_install_include_dir }}\"
        Copy-Item "${{ env.luajit_temp_dir }}\src\lua.hpp" -Destination "${{ env.lua_install_include_dir }}\"

        Start-Process -FilePath "${{ env.lua_install_bin_dir }}\luajit.exe" -ArgumentList " -v" -Wait -NoNewWindow
        Start-Process -FilePath "${{ env.lua_install_bin_dir }}\luajit.exe" -ArgumentList " -e `"print(_VERSION)`"" -Wait -NoNewWindow

    - name: Run lua script to adjust lua package pathes
      run: |
        Start-Process -FilePath "${{ env.lua_install_bin_dir }}\luajit.exe" -ArgumentList " ${{ github.workspace }}\noita-mp\files\lib\external\modules_handler.lua ${{ env.temp_dir }}" -Wait -NoNewWindow
        
    - name: Set GitHub env variables
      shell: bash
      run: |
        fixedpath=echo "${{ env.temp_dir }}" | sed -e 's_\\_/_g' # replce \ with /
        echo "fixedpath = $fixedpath"
        newluapath=cat $fixedpath
        echo "LUA_PATH=;;${{ github.workspace }}/Lua/lib/?.lua;${{ github.workspace }}/Lua/lib/?/init.lua;${{ github.workspace }}/Lua/lib/jit/?.lua;${{ github.workspace }}/Lua/lib/jit/?/init.lua;$newluapath" >> $GITHUB_ENV
        echo ${{ env. LUA_PATH }}

        #$lua_cpath = Get-Content ${{ env.temp_dir }}\lua_cpath.txt -Raw 
        #Write-Host "LUA_CPATH=`"${{ env.LUA_CPATH }};$lua_cpath`"" >> $GITHUB_ENV

    - name: Install LuaUnit 3.4
      if: ${{ false }}
      run: |
        Copy-Item "${{ github.workspace }}\.testing\luaunit.lua" -Destination "${{ env.lua_install_lib_dir }}\"

    - name: Run LuaUnit 3.4
      id: lua_unit_tests
      run: |
        env

        dir -Path ${{ github.workspace }}\.testing\tests -Filter *.lua -Recurse | %{& '${{ env.lua_install_bin_dir }}\luajit.exe' $_.FullName -o text --verbose --error > ${{ github.workspace }}\.testing\testresult.log}
        type ${{ github.workspace }}\.testing\testresult.log
        
        # https://timheuer.com/blog/manually-force-a-failure-in-github-action-step/
        $testFail = Select-String -Path ${{ github.workspace }}\.testing\testresult.log -Pattern 'FAIL' -CaseSensitive
        Write-Output "::set-output name=fail::$testFail"
        
        $testError = Select-String -Path ${{ github.workspace }}\.testing\testresult.log -Pattern 'ERROR' -CaseSensitive
        Write-Output "::set-output name=error::$testError"
      
    - name: Unit test failed?
      if: ${{ steps.lua_unit_tests.outputs.fail != '' || steps.lua_unit_tests.outputs.error != '' }}
      run: |
        echo "steps.lua_unit_tests.outputs.fail = ${{ steps.lua_unit_tests.outputs.fail }}"
        echo "steps.lua_unit_tests.outputs.error = ${{ steps.lua_unit_tests.outputs.error }}"
        echo "Unit tests failed!"
        exit 1

    - name: Install luarocks 3.8.0 windows
      run: |
        ### install lua rocks manually: https://github.com/luarocks/luarocks/wiki/Installation-instructions-for-Windows
      
        Invoke-WebRequest -Uri "http://luarocks.github.io/luarocks/releases/luarocks-3.8.0-win32.zip" -OutFile "${{ github.workspace }}\luarocks-3.8.0-win32.zip"
        Expand-Archive -Path ${{ github.workspace }}\luarocks-3.8.0-win32.zip -DestinationPath "${{ env.temp_dir }}\luarocks-3.8.0-win32"

        cd ${{ env.temp_dir }}\luarocks-3.8.0-win32
        ls -R

        ### set environment variable https://stackoverflow.com/a/1333717/3493998 + https://www.tutorialspoint.com/how-to-set-environment-variables-using-powershell
        #[System.Environment]::SetEnvironmentVariable('LUAROCKS_CONFIG','${{ github.workspace }}\.building\luarocks-3.8.0\config-windows.5.1.lua')

        ### set luajit pathes to luarocks
        #.\configure --prefix=${{ github.workspace }}\luarocks --with-lua=${{ github.workspace }}\luajit --with-lua-include=${{ github.workspace }}\luajit\include\luajit-2.0 --with-lua-lib=${{ github.workspace }}\luajit\lib
        Write-Host 'Start-Process -FilePath "${{ env.temp_dir }}\luarocks-3.8.0-win32\luarocks-3.8.0-win32\install.bat" -ArgumentList " /P ${{ github.workspace }}\luarocks-3.8.0 /CONFIG ${{ github.workspace }}\.building\luarocks-3.8.0\config-windows.5.1.lua" -Wait -NoNewWindow'
        Start-Process -FilePath "${{ env.temp_dir }}\luarocks-3.8.0-win32\luarocks-3.8.0-win32\install.bat" -ArgumentList " /P ${{ github.workspace }}\luarocks-3.8.0 /CONFIG ${{ github.workspace }}\.building\luarocks-3.8.0\config-windows.5.1.lua" -Wait -NoNewWindow

    - name: Install luarocks 3.8.0 linux
      run: |
        ######## install lua rocks manually: https://github.com/luarocks/luarocks/wiki/Installation-instructions-for-Unix
        wget https://luarocks.github.io/luarocks/releases/luarocks-3.8.0.tar.gz
        tar zxpf luarocks-3.8.0.tar.gz
        cd luarocks-3.8.0
        ######## set luajit pathes to luarocks
        ./configure --prefix=${{ github.workspace }}/luarocks --with-lua=${{ github.workspace }}/luajit --with-lua-include=${{ github.workspace }}/luajit/include/luajit-2.0 --with-lua-lib=${{ github.workspace }}/luajit/lib
        make
        make install

    - name: Install dependencies
      run: |
        ######## Use --tree to define the installation path of the module, which is luajit/share/lua/5.1/ although only the 'root' directory is set
        Start-Process -FilePath "${{ github.workspace }}\luarocks\bin\luarocks" -ArgumentList "/TREE=${{ github.workspace }}\.building\LuaJIT-2.0.4\src\lua\ install luacov" -Wait -NoNewWindow

    - name: Generate coverage report with luacov
      run: |
        sudo find ${{ github.workspace }}\.testing\tests -name "*.lua" -type f -exec ${{ github.workspace }}\luajit\bin\luajit -lluacov {} \;
        ${{ github.workspace }}\luajit\bin\luacov

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ${{ github.workspace }}
        #path_to_write_report: ./codecov_report.txt https://github.com/codecov/codecov-action/issues/476
        verbose: true
